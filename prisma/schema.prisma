// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model JulesTask {
  id                Int    @id @default(autoincrement())
  githubRepoId      BigInt
  githubIssueId     BigInt @unique
  githubIssueNumber BigInt

  // Repository information for easier processing
  repoOwner String
  repoName  String

  // GitHub App integration (optional for backward compatibility)
  installationId Int?
  installation   GitHubInstallation? @relation(fields: [installationId], references: [id])

  // Processing status
  flaggedForRetry Boolean   @default(false)
  retryCount      Int       @default(0)
  lastRetryAt     DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([flaggedForRetry])
  @@index([repoOwner, repoName])
  @@index([createdAt])
  @@index([installationId])
  @@map("jules_tasks")
}

model WebhookLog {
  id        Int      @id @default(autoincrement())
  eventType String
  payload   String // JSON string of the webhook payload
  success   Boolean
  error     String?
  createdAt DateTime @default(now())

  // Indexes for performance
  @@index([eventType])
  @@index([success])
  @@index([createdAt])
  @@map("webhook_logs")
}

model GitHubInstallation {
  id                  Int       @id
  accountId           BigInt
  accountLogin        String
  accountType         String // "User" or "Organization"
  targetType          String // "User" or "Organization"
  permissions         String // JSON string of permissions
  events              String // JSON string of subscribed events
  singleFileName      String?
  repositorySelection String // "all" or "selected"
  suspendedAt         DateTime?
  suspendedBy         String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  repositories    InstallationRepository[]
  tasks           JulesTask[]
  LabelPreference LabelPreference?

  // Indexes for performance
  @@index([accountId])
  @@index([accountLogin])
  @@index([suspendedAt])
  @@map("github_installations")
}

model InstallationRepository {
  id             Int     @id @default(autoincrement())
  installationId Int
  repositoryId   BigInt
  name           String
  fullName       String
  owner          String
  private        Boolean
  htmlUrl        String
  description    String?

  // Timestamps
  addedAt   DateTime  @default(now())
  removedAt DateTime?

  // Relations
  installation GitHubInstallation @relation(fields: [installationId], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([installationId, repositoryId])
  // Indexes for performance
  @@index([installationId])
  @@index([repositoryId])
  @@index([owner, name])
  @@index([removedAt])
  @@map("installation_repositories")
}

model LabelPreference {
  id             Int    @id @default(autoincrement())
  installationId Int
  setupType      String // "all", "selected", "manual"

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  installation GitHubInstallation          @relation(fields: [installationId], references: [id], onDelete: Cascade)
  repositories LabelPreferenceRepository[]

  // Unique constraint - one preference per installation
  @@unique([installationId])
  // Indexes for performance
  @@index([installationId])
  @@index([setupType])
  @@map("label_preferences")
}

model LabelPreferenceRepository {
  id                Int    @id @default(autoincrement())
  labelPreferenceId Int
  repositoryId      BigInt

  // Repository info for easier querying
  name     String
  fullName String
  owner    String

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  labelPreference LabelPreference @relation(fields: [labelPreferenceId], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([labelPreferenceId, repositoryId])
  // Indexes for performance
  @@index([labelPreferenceId])
  @@index([repositoryId])
  @@index([owner, name])
  @@map("label_preference_repositories")
}

model CommentCheckJob {
  id          Int      @id @default(autoincrement())
  taskId      Int
  task        JulesTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  owner       String
  repo        String
  issueNumber Int
  scheduledAt DateTime
  createdAt   DateTime @default(now())

  @@index([scheduledAt])
}
